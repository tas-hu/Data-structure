#include <stdio.h>

#define SIZE 10

int queue[SIZE], front = -1, rear = -1;
int visited[SIZE];

// Enqueue function
void enqueue(int value) {
    if (rear == SIZE - 1)
        return;
    if (front == -1) front = 0;
    queue[++rear] = value;
}

// Dequeue function
int dequeue() {
    if (front == -1 || front > rear)
        return -1;
    return queue[front++];
}

// BFS function
void bfs(int graph[SIZE][SIZE], int start, int n) {
    enqueue(start);
    visited[start] = 1;

    while (front <= rear) {
        int current = dequeue();
        printf("%d ", current);

        for (int i = 0; i < n; i++) {
            if (graph[current][i] == 1 && !visited[i]) {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }
}

// Main function
int main() {
    int n = 5;
    int graph[SIZE][SIZE] = {
        {0, 1, 1, 0, 0},
        {1, 0, 0, 1, 1},
        {1, 0, 0, 1, 0},
        {0, 1, 1, 0, 1},
        {0, 1, 0, 1, 0}
    };

    printf("BFS starting from node 0:\n");
    bfs(graph, 0, n);

    return 0;
}
